package com.siwuxie095.concurrent.chapter6th.example3rd;

/**
 * @author Jiajing Li
 * @date 2020-09-28 08:09:10
 */
public class Main {

    /**
     * 函数式编程简介：无副作用
     *
     * 函数的副作用指的是函数在调用过程中，除了给出了返回值外，还修改了函数外部的状态。比如，函数在调用过程中，修改
     * 了某一个全局状态。函数式编程认为，函数的副作用应该被尽量避免。可以想象，如果一个函数肆意修改全局或者外部状态，
     * 当系统出现问题时，可能很难判断究竟是哪个函数引起的问题，这对于程序的调试和跟踪是没有好处的。如果函数都是显式
     * 函数，那么函数的执行显然不会受到外部或者全局信息的影响，因此，对于调试和排错是有益的。
     *
     * 注意：显式函数是指函数与外界交换数据的唯一渠道就是参数和返回值，显式函数不会去读取或者修改函数的外部状态。与
     * 之相对的是隐式函数，隐式函数除了参数和返回值外，还会读取外部信息，或者可能修改外部信息。
     *
     * 然而，完全的无副作用实际上做不到，因为系统总是需要获取或者修改外部信息，同时，模块之间的交互也极有可能是通过
     * 共享变量进行的。如果完全禁止副作用的出现，也是一件让人很不愉快的事情。因此，大部分函数式编程语言，如 Clojure
     * 等，都允许副作用的存在。但是与面向对象相比，在函数式编程中，这种函数调用的副作用，需要进行有效的限制。
     *
     * PS：对于副作用，仅仅是限制，而非是禁止。
     */
    public static void main(String[] args) {

    }

}
