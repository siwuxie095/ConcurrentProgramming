package com.siwuxie095.concurrent.chapter2nd.example10th;

/**
 * @author Jiajing Li
 * @date 2020-08-31 20:49:45
 */
public class Main {

    /**
     * 分门别类的管理：线程组
     *
     * 在一个系统中，如果线程数量很多，而且功能分配比较明确，就可以将相同功能的线程放置在一个线程组里。
     * 打个比方，如果有一个苹果，就可以把它拿在手里，但是如果有十个苹果，就最好还有一个篮子，否则不方
     * 便携带。对于多线程来说，也是这个道理。想要轻松处理几十个甚至上百个线程，最好还是将它们都装进对应
     * 的篮子里。
     *
     * 线程组的使用非常简单，以 PrintThreadGroupName 为例，建立一个名为 PrintGroup 的线程组，并将
     * T1 和 T2 两个线程加入这个组中。主方法中展示了线程组的两个重要功能，一个是 activeCount()，可以
     * 获得活动线程的总数，但是由于线程是动态的，因此这个值只是一个估计值，不精确，另一个是 list()，可
     * 以打印这个线程组中所有的线程信息，对调试有一定帮助。本例通过 Thread 的构造方法指定线程所属的线程
     * 组，将线程和线程组关联起来。
     *
     * 线程组还有一个值得注意的方法 stop()，它会停止线程组中所有的线程。这看起来是一个很方便的功能，但
     * 是它会遇到和 Thread.stop() 相同的问题，因此使用时需要格外谨慎。
     *
     * 此外，对于编码习惯，强烈建议在创建线程和线程组时，给它们取一个好名字。对于计算机来说，也许名字并
     * 不重要，但是在系统出问题时，很可能会导出系统内所有线程，如果拿到的是一连串的 Thread-0、Thread-1、
     * Thread-2 ... 一定会相视无语，但反之，如果看到的是类似 HttpHandler、FtpService 这样的名字，
     * 则会欣喜不已。
     */
    public static void main(String[] args) {

    }

}
