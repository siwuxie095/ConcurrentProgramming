package com.siwuxie095.concurrent.chapter3rd.example9th;

/**
 * @author Jiajing Li
 * @date 2020-09-06 16:14:24
 */
@SuppressWarnings("all")
public class Main {

    /**
     * 线程复用：线程池
     *
     * 多线程的软件设计方法确实可以最大限度地发挥现代多核处理器的计算能力，提高生产系统的吞吐量和性能。但是，若不加控制
     * 和管理的随意使用线程，对系统的性能反而会产生不利的影响。
     *
     * 一种最为简单的线程创建和回收的方法类似如下代码：
     *
     * new Thread(new Runnable() {
     *     @Override
     *     public void run() {
     *          // do something ...
     *     }
     * }).start();
     *
     * 以上代码创建了一个线程，并在 run() 方法结束后，自动回收该线程。在简单的应用系统中，这段代码并没有太多问题。但是
     * 在真实的生产环境中，系统由于真实环境的需要，可能会开启很多线程来支撑其应用。而当数量过大时，反而会耗尽 CPU 和内
     * 存资源。
     *
     * 首先，虽然与进程相比，线程是一种轻量级的工具，但其创建和关闭依然需要花费时间，如果为每一个小任务都创建一个线程，
     * 很有可能出现创建和销毁线程所占用的时间大于该线程真实工作所消耗的时间的情况，反而会得不偿失。
     *
     * 其次，线程本身也是要占用内存空间的，大量的线程会抢占宝贵的内存资源，如果处理不当，可能会导致 Out Of Memory
     * (即 OOM) 异常。即便没有，大量的线程回收也会给 GC 带来很大的压力，延长 GC 的停顿时间。
     *
     * 对线程的使用必须掌握一个度，在有限的范围内，增加线程的数量可以明显提高系统的吞吐量，但一旦超出了这个范围，大量
     * 的线程只会拖垮应用系统。因此，在生产环境中使用线程，必须对其加以控制和管理。
     *
     * 注意：在实际生产环境中，线程的数量必须得到控制。盲目的大量创建线程对系统性能是有伤害的。
     *
     *
     * 什么是线程池
     *
     * 为了避免系统频繁地创建和销毁线程，可以让创建的线程进行复用。这有些类似于数据库开发中的数据库连接池，为了避免每次
     * 数据库操作都重新建立和销毁数据库连接，可以使用数据库连接池维护一些数据库连接，让它们长期保持在一个激活状态。当系
     * 统需要使用数据库时，并不是创建一个新的连接，而是从连接池中获得一个可用的连接即可。反之，当需要关闭连接时，并不真
     * 的把连接关闭，而是将这个连接还给连接池即可。
     *
     * 线程池也是类似的概念。线程池中，总有那么几个活跃线程。当你需要使用线程时，可以从池子中随便拿一个空闲线程，当完成
     * 工作时，并不急着关闭线程，而是将这个线程退回到池子，方便其他人使用。
     *
     * 简而言之，在使用线程池之后，创建线程变成了从线程池获得空闲线程，关闭线程变成了向线程池归还线程。
     */
    public static void main(String[] args) {
        new Thread(new Runnable() {
            @Override
            public void run() {

            }
        }).start();
    }

}
