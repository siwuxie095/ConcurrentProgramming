package com.siwuxie095.concurrent.chapter1st.example1st;

/**
 * @author Jiajing Li
 * @date 2020-01-07 23:18:54
 */
public class Main {

    /**
     * 几个概念：
     *
     * （1） 同步（Synchronous）和异步（Asynchronous）
     * 同步和异步通常用来形容一次方法调用。同步方法调用一旦开始，调用者必须等到方法调用返回后，
     * 才能继续后续的行为。异步方法调用更像一个消息传递，一旦开始，方法调用就会立即返回，调用
     * 者就可以继续后续的操作。而异步方法通常会在另一个线程中 "真实" 地执行。整个过程不会阻碍
     * 调用者的工作。如果异步方法调用需要返回返回结果，那么当这个异步方法调用真实完成时，就会
     * 通知调用者。
     *
     * PS：
     * 同步方法调用，也称为 同步调用
     * 异步方法调用，也称为 异步调用
     * 同步方法，即 被调用的同步方法
     * 异步方法，即 被调用的异步方法
     *
     *
     * （2）并发（Concurrency）和并行（Parallelism）
     *并发和并行是两个非常容易被混淆的概念。它们都可以表示两个或者多个任务一起执行，但是偏重点
     * 有些不同。并发偏重于多个任务交替执行，而多个任务之间有可能还是串行的。而并行是真正意义
     * 上的 "同时执行"。
     *
     * 严格意义上来说，并行的多个任务是真实的同时执行，而对于并发来说，这个过程只是交替的，一
     * 会儿运行任务 A 一会儿执行任务 B，系统会不停地在两者见切换。但对于外部观察者来说，即使
     * 多个任务之间是串行并发的，也会造成多任务间是并行执行的错觉。
     *
     * 实际上，如果系统内只有一个 CPU，这时使用多进程或多线程任务，那么这些任务不可能是真实并
     * 行的，因为一个 CPU 一次只能执行一条指令，所以此时多进程或多线程是并发的，而不是并行的。
     * 真实的并行只可能出现在拥有多个 CPU 的系统中。
     *
     * 因为并发的最终效果可能是和并行是一样的，所以没有特别需要，不必刻意区分。
     *
     * 总结：并发和并行的区别在于多任务是否同时执行。
     * 1）并发：多任务不是同时执行的。
     * 2）并行：多任务是同时执行的。
     *
     *
     */
    public static void main(String[] args) {

    }

}
