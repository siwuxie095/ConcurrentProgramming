package com.siwuxie095.concurrent.chapter1st.example3rd;

/**
 * @author Jiajing Li
 * @date 2020-08-17 22:22:20
 */
public class Main {

    /**
     * 有关并行的两个重要定律
     *
     * 为什么要使用并行程序？最重要的是出于两个目的。
     * （1）为了获得更好的性能。
     * （2）由于业务模型的需要，确实需要多个执行实体。
     *
     * 一般来说，会更加关注第一个目的。将串行程序改造为并行，一般来说可以提高程序的整体性能，
     * 但是究竟能提高多少，甚至究竟是否真的可以提高，还是一个需要研究的问题。目前主要有两个
     * 定律对这个问题进行了解答。一个是 Amdahl 定律，另一个是 Gustafson 定律。
     *
     * （1）Amdahl 定律（阿姆达尔定律）
     * Amdahl 定律是计算机科学中非常重要的定律。它定义了串行系统并行化后的加速比的计算公式
     * 和理论上限。
     *
     * 加速比定义：
     * 加速比 = 优化前系统耗时 / 优化后系统耗时
     *
     * 即 所谓加速比，就是优化前的耗时与优化后的耗时的笔直。加速比越高，表明优化效果越明显。
     * 公式主要是研究加速比和处理器个数、串行比例之间的关系。
     *
     * 根据公式，如果 CPU 的处理器数量趋于无穷，那么加速比与系统的串行化率成反比（串行化率
     * 即程序中只能串行执行的比例）。
     *
     * 所以，为了提高系统的速度，仅增加 CPU 处理器的数量并不一定能起到有效的作用。需要从根
     * 本上修改程序的串行行为，提高系统内可并行化的模块比重，在此基础上，合理增加并行处理器
     * 数量，才能以最小的投入，得到最大的加速比。
     *
     * 注意：根据 Amdahl 定律，使用多核 CPU 对系统进行优化，优化的效果取决于 CPU 的数量
     * 以及系统中的串行化程序的比重。CPU 数量越多，串行化比重越低，则优化效果越好。仅提高
     * CPU 数量而不降低程序的串行化比重，也无法提高系统性能。
     *
     *
     * （2）Gustafson 定律（古斯塔夫森定律）
     * Gustafson 定律也试图说明处理器个数、串行比例和加速比之间的关系，但是 Gustafson
     * 定律和 Amdahl 定律的角度不同。同样，加速比都定义为优化前的系统耗时除以优化后的系统
     * 耗时。
     *
     * 根据公式，如果串行化比例很小，并行化比例很大，那么加速比就是处理器的个数。只要不断
     * 累加处理器，就能获得更快的速度。
     *
     *
     * Amdahl 定律和 Gustafson 定律是否相互矛盾？
     * 其实不然，两者的结论不同，是因为两个定律对于同一个客观事实从不同角度去审视后的结果，
     * 它们的偏重点有所不同。
     *
     * Amdahl 定律强调：当串行比例一定时，加速比是有上限的，不管堆叠多少个 CPU 参与计算，
     * 都不能突破这个上限。
     *
     * Gustafson 定律的出发点与之不同，它关心的是：如果可被并行化的代码所占比重足够多，
     * 那么加速比就能随着 CPU 的数量线性增长。
     *
     * 从极端角度来说，如果系统中没有可被并行化的代码（即 串行化比例为 1，并行化比例为 0），
     * 那么对于这两个定律，其加速比都为 1。反之如果系统中可并行化代码比重达到 100%（即 串行
     * 化比例为 0，并行化比例为 1），那么这两个定律得到的加速比都是 n（处理器个数）。
     */
    public static void main(String[] args) {

    }

}
