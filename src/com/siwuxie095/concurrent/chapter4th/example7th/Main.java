package com.siwuxie095.concurrent.chapter4th.example7th;

/**
 * @author Jiajing Li
 * @date 2020-09-12 15:17:14
 */
public class Main {

    /**
     * JVM 对锁优化所做的努力：偏向锁
     *
     * 作为一款共用平台，JDK 本身也为并发程序的性能绞尽脑汁，即 从内部出发，想尽一切办法以提高并发时的
     * 系统吞吐量。
     *
     * 锁偏向是一种针对加锁操作的优化手段。它的核心思想是：如果一个线程获得了锁，那么锁就进入了偏向模式。
     * 当这个线程再次请求锁时，无须再做任何同步操作。这样就节省了大量有关锁申请的操作，从而提高了程序性
     * 能。因此，对于几乎没有任何锁竞争的场合，偏向锁有比较好的优化效果，因为连续多次极有可能是同一个线
     * 程请求相同的锁。而对于锁竞争比较激烈的场合，其效果不佳。因为在竞争激烈的场合，最有可能的情况是每
     * 次都是不同的线程来请求相同的锁。这样偏向模式会失效，因此还不如不启用偏向锁。
     *
     * 使用如下 JVM 参数可以开启偏向锁（启用）：
     *
     * -XX:+UseBiasedLocking
     *
     * 使用如下 JVM 参数可以关闭偏向锁（禁用）：
     *
     * -XX:-UseBiasedLocking
     */
    public static void main(String[] args) {

    }

}
