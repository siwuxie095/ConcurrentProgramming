package com.siwuxie095.concurrent.chapter4th.example1st;

/**
 * @author Jiajing Li
 * @date 2020-09-11 07:41:40
 */
public class Main {

    /**
     * 锁的优化及注意事项
     *
     * 锁是最常用的同步方法之一。在高并发的环境下，激烈的锁竞争会导致程序的性能下降。所以自然有必要讨论一些有关
     * 锁的性能问题以及一些注意事项。比如：避免死锁、减小锁力度、锁分离等。
     *
     * 在多核 CPU 时代，使用多线程可以明显提高系统的性能。但事实上，使用多线程的方式会额外增加系统的开销。对于
     * 单任务或者单线程的应用而言，其主要资源消耗都花在任务本身。它既不需要维护并行数据结构间的一致性状态，也不
     * 需要为线程的切换和调度花费时间。但对于多线程应用来说，系统除了处理功能需求外，还需要额外维护多线程环境的
     * 特有信息，如线程本身的元数据、线程的调度、线程上下文的切换等。
     *
     * 而在单核 CPU 时代，采用并行算法的效率一般要低于原始的串行算法，其根本原因也在于此。所以，并行计算之所以
     * 能够提高系统的性能，并不是因为它少干活了，而是因为并行计算可以更合理的进行任务调度，充分利用各个 CPU 资
     * 源。合理的并发，才能将多核 CPU 的性能发挥到极致。
     */
    public static void main(String[] args) {

    }

}
