package com.siwuxie095.concurrent.chapter7th.example2nd;

/**
 * @author Jiajing Li
 * @date 2020-10-02 10:14:27
 */
public class Main {

    /**
     * 新并发模型：Actor
     *
     * 对于并发程序来说，线程始终作为并发程序的基本执行单元。但在 Akka 中，可以完全忘记线程了。当使用 Akka 时，
     * 就有了一个全新的基本执行单元 -- Actor。Actor 是什么呢？
     *
     * 简单来说，可以把 Actor 比喻成一个人。多个人之间可以使用语言进行交流。比如，老师问同学 5 乘以 5 是多少？
     * 同学听到问题后，想了想，回答说是 25。Actor 之间的通信方式这种对话形式几乎是一模一样的。
     *
     * 传统 Java 并行程序，还是基于面向对象的方法。通过对象的方法调用进行信息的传递。这时，如果对象的方法会修改
     * 对象本身的状态，那么在多线程情况下，就有可能出现对象状态的不一致，所以必须对这类方法调用进行同步。当然，
     * 同步往往以牺牲性能为代价。
     *
     * 在 Actor 模型中，失去了对象的方法调用，因为并不是通过调用 Actor 对象的某一个方法来告诉 Actor 你需要做
     * 什么，而是给 Actor 发送一条消息。当一个 Actor 收到消息后，它有可能会根据消息的内容做出某些行为，包括更
     * 改自身状态。但是，在这种情况下，这个状态的更改是 Actor 自己进行的，并不是由外界被迫进行的。
     */
    public static void main(String[] args) {

    }

}
